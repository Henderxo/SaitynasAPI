openapi: 3.0.0
info:
  title: Developers API
  description: API to manage developers, including CRUD operations with authentication
  version: 1.0.0
  contact:
    name: API Support
    url: http://example.com/support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /login:
    post:
      summary: User login
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successfully logged in, returns a JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Unauthorized - Invalid credentials
        '500':
          description: Error during login

  /developers:
    get:
      summary: Get all developers
      tags:
        - Developers
      parameters:
        - name: expand
          in: query
          schema:
            type: string
            enum: [userId]
          description: Expand related user data
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of developers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Developer'
        '500':
          description: Error fetching developers
    post:
      summary: Create a new developer
      tags:
        - Developers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeveloperInput'
      security:
        - BearerAuth: []
      responses:
        '201':
          description: Created developer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '422':
          description: Validation error for input data
        '500':
          description: Error creating developer

  /developers/{id}:
    get:
      summary: Get developer by ID
      tags:
        - Developers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The developer ID
        - name: expand
          in: query
          schema:
            type: string
            enum: [userId]
          description: Expand related user data
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A developer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '404':
          description: Developer not found
        '500':
          description: Error fetching developer

    put:
      summary: Update developer by ID
      tags:
        - Developers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The developer ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeveloperInput'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Updated developer object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Developer'
        '404':
          description: Developer not found
        '422':
          description: Validation error for input data
        '500':
          description: Error updating developer

    delete:
      summary: Delete developer by ID
      tags:
        - Developers
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The developer ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Deleted developer
        '404':
          description: Developer not found
        '500':
          description: Error deleting developer

  /developers/{developerId}/games:
    get:
      summary: Get games by developer
      tags:
        - Developers
      parameters:
        - name: developerId
          in: path
          required: true
          schema:
            type: string
          description: The developer ID
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of games developed by the developer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        '404':
          description: Developer not found
        '500':
          description: Error fetching games

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Developer:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the developer
        name:
          type: string
        founder:
          type: string
        founded:
          type: string
          format: date
        headquarters:
          type: string
        userId:
          type: string
          description: The ID of the associated user
      example:
        id: 67081490ab3278bc70ee582c
        name: Awesome Dev Studio
        founder: John Doe
        founded: 2010-05-01T00:00:00.000Z
        headquarters: San Francisco, CA
        userId: 670808e1b28f81ef82392ec5

    DeveloperInput:
      type: object
      required:
        - name
        - founder
        - founded
        - headquarters
        - userId
      properties:
        name:
          type: string
        founder:
          type: string
        founded:
          type: string
          format: date
        headquarters:
          type: string
        userId:
          type: string
          description: The ID of the associated user
      example:
        name: Awesome Dev Studio
        founder: John Doe
        founded: 2010-05-01T00:00:00.000Z
        headquarters: San Francisco, CA
        userId: 670808e1b28f81ef82392ec5

    Game:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the game
        title:
          type: string
        genre:
          type: string
        platform:
          type: string
        controllerSupport:
          type: boolean
        language:
          type: string
        playerType:
          type: string
        developerId:
          type: string
          description: The ID of the developer associated with this game
      example:
        id: 670aa9037ca2d60776b523e8
        title: Retro Racer
        genre: Racing
        platform: Switch
        controllerSupport: true
        language: Japanese
        playerType: Multiplayer
        developerId: 67081490ab3278bc70ee582c
