openapi: 3.0.0
info:
  title: Users API
  description: API to manage users, including CRUD operations and authentication
  version: 1.0.0
  contact:
    name: API Support
    url: http://example.com/support
    email: support@example.com
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Error fetching users
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Email already exists
        '500':
          description: Error creating user

  /users/{id}:
    get:
      summary: Get user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Error fetching user
    put:
      summary: Update user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '200':
          description: Updated user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '422':
          description: Invalid input
        '500':
          description: Error updating user
    delete:
      summary: Delete user by ID
      tags:
        - Users
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The user ID
      responses:
        '200':
          description: Deleted user
        '404':
          description: User not found
        '500':
          description: Error deleting user

  /login:
    post:
      summary: Login a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: JWT token for authentication
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                example:
                  token: "your_jwt_token"
        '400':
          description: Invalid email or password



components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the user
        username:
          type: string
        email:
          type: string
        password:
          type: string
        type:
          type: string
          enum: [admin, dev, guest]
        created_at:
          type: string
          format: date-time
      example:
        id: 670808e1b28f81ef82392ec5
        username: gameLover1
        email: gamelover1@example.com
        type: guest
        created_at: 2023-01-01T00:00:00Z

    UserInput:
      type: object
      required:
        - username
        - email
        - password
        - type
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        type:
          type: string
          enum: [admin, dev, guest]
      example:
        username: gameLover1
        email: gamelover1@example.com
        password: $2b$10$encryptedpassword4
        type: guest
